*pandoc.txt* Pandoc plugin for Neovim v0.7.0 or higher

Author: Pedro Castro
Homepage: <https://github.com/aspeddro/pandoc.nvim>
License: MIT

================================================================================
Table of Contents                                              *pandoc.contents*

Introduction······················································|pandoc.intro|
Setup···································································|pandoc|
Configuration····················································|pandoc.config|
Pandoc Render····················································|pandoc.render|
Pandoc Utils······················································|pandoc.utils|

================================================================================
Introduction                                                      *pandoc.intro*

pandoc.nvim is a plugin to provide basic support for Pandoc CLI.

================================================================================
Setup                                                                   *pandoc*

M.setup({opts?})                                                  *pandoc.setup*
    Setup pandoc.nvim. If you want to override default config, just modify the
    option that you want then it will be merged with the default config

    Parameters: ~
        {opts?}  (Config)

    Returns: ~
        {Config}

    See: ~
        |pandoc.config|

    Usage: ~
        >
             -- Using default configuration
             require('pandoc').setup()

             -- Custom configuration
             require('pandoc').setup{
               commands = {
                 name = 'PandocBuild'
               },
               default = {
                 output = '%s_output.pdf'
               },
               mappings = {
                 -- normal mode
                 n = {
                   ['<leader>pr'] = function ()
                     require('pandoc.render').init()
                   end
                 }
               }
             }
        <


================================================================================
Configuration                                                    *pandoc.config*

Commads                                                                *Commads*

    Fields: ~
        {enable}    (boolean)  Enable command. Default is `true`
        {name}      (string)   Name of command. Default is `:Pandoc`
        {extended}  (boolean)  When enabled the arguments passed by the command will be extended with the default arguments. Default is `true`


Default                                                                *Default*

    Fields: ~
        {output}  (string)    Template of output with extension. Default is `%s.pdf`
        {bin}     (string)    Path to pandoc binary. Default is `'pandoc'`
        {args}    (string[])  Arguments to pass pandoc CLI. Default is `{ {'--standalone'} }`


Config                                                                  *Config*

    Fields: ~
        {commands}  (Commads)
        {mappings}  (table<string,table<string,function>>)


M.get()                                                      *pandoc.config.get*
    Get the default config

    Returns: ~
        {Config}


================================================================================
Pandoc Render                                                    *pandoc.render*

M.file({args?})                                             *pandoc.render.file*
    Build The Current File

    Parameters: ~
        {args?}  (string[])  Arguments to pass CLI

    Returns: ~
        {nil}

    Usage: ~
        >
            -- Build the current file
            require('pandoc.render').init()
            -- With custom arguments
            require('pandoc.render').init{
               {'--toc'},
               {'--output', 'path/to/output.pdf'}
            }
        <


M.build({bin}, {args})                                     *pandoc.render.build*
    Pandoc Build

    Parameters: ~
        {bin}   (string)    Path to Pandoc binary
        {args}  (string[])  Arguments to pass CLI

    Returns: ~
        {nil}

    Usage: ~
        >
            require('pandoc.render').build(
               'pandoc',
               {
                 { 'path/to/input.md' },
                 { '--toc' },
                 { '--output', 'path/to/output.pdf' }
               }
            )
        <


================================================================================
Pandoc Utils                                                      *pandoc.utils*

M.complete()                                             *pandoc.utils.complete*
    Completion Pandoc CLI arguments

    Returns: ~
        {string[]}

    Usage: ~
        >
            vim.api.nvim_create_user_command('PandocBuild', function()
              require('pandoc.render').init()
            end, {
               nargs = "*",
               complete = require('pandoc.utils').complete,
            })
        <


vim:tw=78:ts=8:noet:ft=help:norl:
